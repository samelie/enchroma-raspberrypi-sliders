<!DOCTYPE html>
<html>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0, minimal-ui">
<link href="https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/10.1.0/nouislider.min.css">
<link href="https://fonts.googleapis.com/css?family=Nunito" rel="stylesheet">

<script>
  window.SOCKET_URL = <%- SOCKET_URL %>;
 console.log(window.SOCKET_URL);
</script>

<head>
  <style>
  body {
    position: absolute;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    font-family: 'Nunito', sans-serif;
  }

  canvas {
    border: 0;
  }

  #yui3-css-stamp {
    display: none;
  }

  .output {
    position: absolute;
    left: 200px;
    height: 100%;
    width: 300px;
  }

  .output-items {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
  }

  .output-sliders {
    display: flex;
    width: 100%;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom: 40px;
    height: calc(100% - 150px);
    height: -webkit-calc(100% - 150px);
  }

  .slider {
    position: relative;
    height: 100%;
  }

  .slider-label {
    min-width: 30px;
  }

  .noUi-vertical .noUi-handle {
    width: 50px;
    height: 44px;
    left: -17px;
  }

  .noUi-vertical .noUi-handle::after,
  .noUi-vertical .noUi-handle::before {
    width: 35px;
    top: 50%;
    background: #737271;
  }

  .noUi-vertical .noUi-handle::after {
    margin-top: 4px;
  }

  .text-line {
    padding-bottom: 6px;
  }

  .download {
    cursor: pointer;
    user-select: none;
    margin-bottom: 6px;
  }

  .info {
    display: flex;
    /*HIDE*/
    display: none;
    /*HIDE*/
    position: relative;
    justify-content: flex-start;
    align-items: flex-start;
    flex-direction: column;
  }

  .info--title {
    margin-top: 6px;
  }

  .info--data {
    margin-left: 6px;
  }
  </style>
</head>

<body>
  <div class="output">
    <div class="output-items">
      <div class="text-line test--complete">Test complete</div>
      <div class="output-sliders">
        <div class="slider-label"></div>
        <div class="slider slider--red"></div>
        <div class="slider-label"></div>
        <div class="slider slider--green"></div>
        <div class="slider-label"></div>
        <div class="slider slider--blue"></div>
      </div>
      <div class="text-line download">Download results</div>
      <div class="info">
        <span class="info--title">Hex:</span>
        <span class="info--data" id="hex"></span>
        <br>
        <span class="info--title">RGB:</span>
        <span class="info--data" id="rgb"></span>
        <br>
        <span class="info--title">HSL:</span>
        <span class="info--data" id="hsl"></span>
      </div>
    </div>
  </div>
  <canvas id="myCanvas"></canvas>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/10.1.0/nouislider.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/color-js/1.0.1/color.min.js"></script>
  <script>
  //get output div by its class
  var outputEl = document.querySelector('.output')
  var c = document.getElementById("myCanvas");
  c.width = window.innerWidth
  c.height = window.innerHeight

  var ColorLibrary = net.brehaut.Color;
  var ctx = c.getContext("2d");

  //**************
  /// MATCHING COLOR
  //**************

  var USE_HSL = false
  var SLIDER_START_VALUES = [
    USE_HSL ? 180 : Math.round(0.999 * 255),
    USE_HSL ? 0.5 : Math.round(0.999 * 255),
    USE_HSL ? 0.5 : Math.round(0.999 * 255)
  ]

  var UserColor = ColorLibrary([
    SLIDER_START_VALUES[0],
    SLIDER_START_VALUES[1],
    SLIDER_START_VALUES[2]
  ]);
  if (USE_HSL) {
    UserColor = UserColor.toHSL()
  }

  //**************
  /// HELPER FUNCTIONS
  //**************

  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = (function() {
      return window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {
          window.setTimeout(callback, 1000 / 60);

        };
    })();
  }

  if (!window.perfomance || !window.perfomance.now) {
    Date.now || (Date.now = function() {
      return new this().getTime();
    });

    (window.perfomance ||
      (window.perfomance = {})).now = function() {
      return Date.now() - offset;
    };

    var offset = (window.perfomance.timing ||
        (window.perfomance.timing = {})).navigatorStart ||
      (window.perfomance.timing.navigatorStart = Date.now());
  }

  function userColorRGB() {
    var r = UserColor.getRed()
    var g = UserColor.getGreen()
    var b = UserColor.getBlue()
    if (USE_HSL) {
      var rgb = UserColor.toRGB()
      r = Math.round(rgb.red * 255)
      g = Math.round(rgb.green * 255)
      b = Math.round(rgb.blue * 255)
    }
    return "rgb(" + r + ", " + g + ", " + b + ")";
  }

  function rgbToHSL(r, g, b, css) {
    r /= 255, g /= 255, b /= 255;

    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }
    if (!css) {
      return [
        parseFloat((h * 100).toFixed(1)),
        parseFloat((s * 100).toFixed(1)),
        parseFloat(l.toFixed(1))
      ]
    }
    return "hsl(" + (h * 100).toFixed(1) + "% , " + (s * 100).toFixed(1) + "% , " + l.toFixed(1) + ")";
  }

  var RGBToHex = function(r, g, b) {
    var bin = r << 16 | g << 8 | b;
    return (function(h) {
      return new Array(7 - h.length).join("0") + h
    })(bin.toString(16).toUpperCase())
  }

  function convertArrayOfObjectsToCSV(args) {
    var result, ctr, keys, columnDelimiter, lineDelimiter, data;

    data = args.data || null;
    if (data == null || !data.length) {
      return null;
    }

    columnDelimiter = args.columnDelimiter || ',';
    lineDelimiter = args.lineDelimiter || '\n';

    keys = Object.keys(data[0]);

    result = '';
    result += keys.join(columnDelimiter);
    result += lineDelimiter;

    data.forEach(function(item) {
      ctr = 0;
      keys.forEach(function(key) {
        if (ctr > 0) result += columnDelimiter;

        result += item[key];
        ctr++;
      });
      result += lineDelimiter;
    });

    return result;
  }

  function downloadCSV(obj) {
    var data, filename, link;
    var csv = convertArrayOfObjectsToCSV({
      data: obj.data
    });
    if (csv == null) return;
    var date = new Date()
    date.toLocaleString('en-us', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    filename = obj.filename || date + '.csv';

    if (!csv.match(/^data:text\/csv/i)) {
      csv = 'data:text/csv;charset=utf-8,' + csv;
    }
    data = encodeURI(csv);

    link = document.createElement('a');
    link.setAttribute('href', data);
    link.setAttribute('download', filename);
    link.click();
  }

  //**************
  /// RESIZE HELPER FUNCTIONS
  //**************

  var radius
  var leftCIrcleX
  /*
  !!!!
  Control size of circle,
  smaller = bigger
  */
  var CIRCLE_RADIUS_DEVISOR = 3

  function getScreenSize() {
    radius = Math.min(Math.min(window.innerWidth, window.innerHeight) / CIRCLE_RADIUS_DEVISOR, 300) // value to scale the circles, max radius of 300
    leftCIrcleX = Math.max(window.innerWidth / 4, radius + 20) //20 pixels minimum from the side
    c.width = window.innerWidth
    c.height = window.innerHeight
    outputEl.style.left = leftCIrcleX * 2 + "px"
    outputEl.style.width = (window.innerWidth - leftCIrcleX * 2 - 70) + "px"
  }

  /*
  CREATE A SLIDER
  */
  function createSlider(element, color, min, max) {
    noUiSlider.create(element, {
      start: [color],
      direction: 'rtl',
      orientation: 'vertical',
      connect: true,
      range: {
        'min': min,
        'max': max
      }
    });
  }

  var HIDE_SLIDERS_DURING_TEST = false

  var hexEl = document.getElementById("hex");
  var rgbEl = document.getElementById("rgb");
  var hslEl = document.getElementById("hsl");
  var sliderLabelEls = document.querySelectorAll('.slider-label');
  var rSliderEl = document.querySelector('.slider--red');
  var gSliderEl = document.querySelector('.slider--green');
  var bSliderEl = document.querySelector('.slider--blue');
  var outputItemsEl = document.querySelector('.output-items');
  var downloadEl = document.querySelector('.download');
  var testCompleteEl = document.querySelector('.test--complete');
  /*HIDE ELEMENTS*/
  downloadEl.style.visibility = "hidden"
  testCompleteEl.style.visibility = "hidden"
  if (HIDE_SLIDERS_DURING_TEST) {
    outputItemsEl.style.visibility = "hidden"
  }

  /*EXPORT CSV*/
  downloadEl.addEventListener('click', function() {
    downloadCSV({ data: OUTPUT_DATA })
  })

  //boom,boom,boom
  createSlider(rSliderEl,SLIDER_START_VALUES[0],0,  USE_HSL ? 360 : 255)
  createSlider(gSliderEl,SLIDER_START_VALUES[1],0,  USE_HSL ? 1 : 255)
  createSlider(bSliderEl,SLIDER_START_VALUES[2],0,  USE_HSL ? 1 : 255)


  //!!!!!!!!!!! we hide this in the .CSS
  function updateOutput() {
    hexEl.innerText = "#" + RGBToHex(UserColor.getRed(), UserColor.getGreen(), UserColor.getBlue()) //UserColor.toCSS(1)
    rgbEl.innerText = userColorRGB()
    hslEl.innerText = rgbToHSL(UserColor.getRed(), UserColor.getGreen(), UserColor.getBlue())
  }

  /*
  TEST LOOP BELOW !!!
  */


  //***********
  // SETUP
  //***********
  var STARE_DURATION = 3000
  var MATCH_DURATION = 3000
  var RESET_DURATION = 0
  var WHITE = [255, 255, 255]
  var BACKGROUND_GREY = [128, 128, 128]
  var RGB_TEST_VALUES = [
    [255, 87, 87],
    [255, 87, 87],
    [255, 87, 87],
    [255, 87, 87],
  ]
  var OUTPUT_DATA = []

  //***********
  // internal variables
  //***********
  var _testIndex = 0
  var _testSequence = []


  //***********
  // internal setup function
  //***********
  function setTestTimings() {
    var _time = 0
    RGB_TEST_VALUES.forEach(function(_, i) {

      _time += STARE_DURATION
      /*
      Testing testObject
      */
      _testSequence.push({
        endTime: _time,
        leftCircleRGB: RGB_TEST_VALUES[i],
        leftCircleHSL: rgbToHSL(...RGB_TEST_VALUES[i]),
        rightCircleRGB: BACKGROUND_GREY,
        isMatchingMode: false,
      })

      _time += MATCH_DURATION
      /*
      Matching testObject
      */
      _testSequence.push({
        endTime: _time,
        leftCircleRGB: WHITE,
        rightCircleRGB: WHITE, // will be overwritten by UserColor
        isMatchingMode: true,
      })

      _time += RESET_DURATION

      if (RESET_DURATION) {
        /*
      RESET
      reset testObject
      */
        _testSequence.push({
          endTime: _time,
          leftCircleRGB: BACKGROUND_GREY,
          rightCircleRGB: BACKGROUND_GREY,
          isResetingMode: true,
          isMatchingMode: false,
        })
      }
    })
  }

  setTestTimings()


  //***********
  // DRAWING!!!
  /*
    This is a loop at 60fps
    we measure elapsed time at the end to step through the timings
  */
  //***********

  var _timeElapsed = performance.now()
  console.log(_testSequence);

  function drawCanvas() {
    var now = performance.now();
    //check to see if completed, anc cancek out if so
    if (_testIndex > _testSequence.length - 1) {
      testCompleteEl.style.visibility = "visible"
      outputItemsEl.style.visibility = "visible"
      return
    }


    //pick the testObject out
    var testObject = _testSequence[_testIndex]
    //short hand access
    var isMatchingMode = testObject.isMatchingMode
    /*
    Wipe the canvas
    */
    ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);

    /*
    Backgrround color
    */
    ctx.fillStyle = "rgb(" + BACKGROUND_GREY.join(",") + ")";
    ctx.fillRect(0, 0, window.innerWidth, window.innerHeight);

    ctx.strokeStyle = "rgb(0,0,0)";
    ctx.lineWidth = 1;

    /*
    Left circle
    */
    ctx.beginPath();
    ctx.arc(leftCIrcleX, window.innerHeight / 2, radius, 0.5 * Math.PI, 1.5 * Math.PI, false);
    ctx.closePath();
    ctx.fillStyle = "rgb(" + testObject.leftCircleRGB.join(",") + ")";
    ctx.fill();
    ctx.stroke();

    /*
    Right circle
    */
    ctx.beginPath();
    ctx.arc(leftCIrcleX, window.innerHeight / 2, radius, 0.5 * Math.PI, 1.5 * Math.PI, true);
    ctx.closePath();
    if (isMatchingMode) {
      ctx.fillStyle = userColorRGB()
    } else {
      ctx.fillStyle = "rgb(" + testObject.rightCircleRGB.join(",") + ")";
    }
    ctx.fill();
    ctx.stroke();

    /*
    Focus circle
    */
    var remappedTime = now * 0.002
    ctx.setLineDash([])
    ctx.beginPath();
    var _cos = Math.abs(Math.cos(remappedTime))
    var _sin = Math.abs(Math.sin(remappedTime))
    var _tan = Math.atan(_sin / _cos)
    if (ctx.ellipse) {
      ctx.ellipse(
        leftCIrcleX, //x
        window.innerHeight / 2, //y
        _cos * (2.5) + 2.5, //radiusX
        _sin * 2.5 + 2.5, //radiusY
        45 * Math.PI / 180, 0, 2 * Math.PI
      );
    } else {
      ctx.arc(
        leftCIrcleX, //x
        window.innerHeight / 2, //y
        _cos * (.5) + 4.5,
        0, 2 * Math.PI, true);
    }
    ctx.fillStyle = "rgb(0,0,0)";
    ctx.fill();

    /*
    Check timings
    */
    _timeElapsed = now - _timeElapsed
    if (_timeElapsed > testObject.endTime) {
      //write the data out
      if (isMatchingMode) {
        captureData(_testSequence[_testIndex - 1])
        if (HIDE_SLIDERS_DURING_TEST) {
          outputItemsEl.style.visibility = "hidden"
        }
      } else {
        if (HIDE_SLIDERS_DURING_TEST) {
          outputItemsEl.style.visibility = "visible"
        }
      }

      _testIndex++
    }

    //loop!!
    requestAnimationFrame(drawCanvas)
  }

  function captureData(testObject) {
    var date = new Date()
    date.toLocaleString('en-us', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    OUTPUT_DATA.push({
      Test_Type: "AF",
      R: testObject.leftCircleRGB[0],
      G: testObject.leftCircleRGB[1],
      B: testObject.leftCircleRGB[2],

      H: testObject.leftCircleHSL[0],
      S: testObject.leftCircleHSL[1],
      L: testObject.leftCircleHSL[2],
      timestamp: date,
    })
    var _hsl = rgbToHSL(...[UserColor.getRed(), UserColor.getGreen(), UserColor.getBlue()])
    OUTPUT_DATA.push({
      Test_Type: "MF",
      R: UserColor.getRed(),
      G: UserColor.getGreen(),
      B: UserColor.getBlue(),
      H: _hsl[0],
      S: _hsl[1],
      L: _hsl[2],
      timestamp: date,
    })

    downloadEl.style.visibility = "visible"
    console.log(OUTPUT_DATA);
  }

  window.addEventListener("resize", function(e) {
    getScreenSize()
  })

  rSliderEl.noUiSlider.on('update', function(values) {
    if (USE_HSL) {
      UserColor = UserColor.setHue(Math.round(values[0]))
      sliderLabelEls[0].innerText = UserColor.getHue()
    } else {
      UserColor = UserColor.setRed(Math.round(values[0]))
      sliderLabelEls[0].innerText = UserColor.getRed()
    }
    updateOutput()
  });
  gSliderEl.noUiSlider.on('update', function(values) {
    if (USE_HSL) {
      UserColor = UserColor.setSaturation(values[0])
      sliderLabelEls[1].innerText = UserColor.getSaturation()
    } else {
      UserColor = UserColor.setGreen(Math.round(values[0]))
      sliderLabelEls[1].innerText = UserColor.getGreen()

    }
    updateOutput()
  });
  bSliderEl.noUiSlider.on('update', function(values) {
    if (USE_HSL) {
      UserColor = UserColor.setLightness(values[0])
      sliderLabelEls[2].innerText = UserColor.getLightness()
    } else {
      UserColor = UserColor.setBlue(Math.round(values[0]))
      sliderLabelEls[2].innerText = UserColor.getBlue()

    }
    updateOutput()
  });

  getScreenSize()

  drawCanvas()
  </script>
</body>

<script src="bundle.js"></script>

</html>